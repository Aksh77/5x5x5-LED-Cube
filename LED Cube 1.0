//FOR ANODE
int clock_1 = 1; //IC Pin 11
int latch_1 = 2; //IC Pin 12
int data_1 = 3; //IC Pin 14
//FOR CATHODE
int clock_2 = 8; //IC Pin 11
int latch_2 = 9; //IC Pin 12
int data_2 = 10; //IC Pin 14

byte shift_1[]=
{
//RITU2016
B01010010,B01010010,B01010010,B01010010,B01010010,
B10001110,B10001110,B10001110,B10001110,B10001110,
B10000100,B10000100,B10000100,B10000100,B10000100, 
B01000100,B01000100,B01000100,B01000100,B01000100,
B01011111,B01011111,B01011111,B01011111,B01011111,
B01001110,B01001110,B01001110,B01001110,B01001110,
B10001110,B10001110,B10001110,B10001110,B10001110, 
B01001110,B01001110,B01001110,B01001110,B01001110,

//Horizontal Layers
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,

//Diagonal
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00100010,B01000100,B10001000,B00010000,B00000000,B00000000,B00000000,B00000000,

};

byte shift_2[]=
{
//RITU2016
B00111001,B00111001,B00111001,B00111001,B00111001,
B00010000,B00010000,B00010000,B00010000,B00010000, 
B00010000,B00010000,B00010000,B00010000,B00010000, 
B11000101,B11000101,B11000101,B11000101,B11000101,
B10010000,B10010000,B10010000,B10010000,B10010000,
B00101001,B00101001,B00101001,B00101001,B00101001, 
B00010000,B00010000,B00010000,B00010000,B00010000, 
B00111001,B00111001,B00111001,B00111001,B00111001,

//Horizontal Layers
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,

//Diagonal
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,
B00000000,B00000000,B00000100,B10001000,B00010001,B00100010,B01000000,B00000000,B00000000,

};

byte shift_3[]=
{
//RITU2016
B11101001,B11101001,B11101001,B11101001,B11101001, 
B11100010,B11100010,B11100010,B11100010,B11100010, 
B11110010,B11110010,B11110010,B11110010,B11110010, 
B00011000,B00011000,B00011000,B00011000,B00011000,
B11100100,B11100100,B11100100,B11100100,B11100100, 
B11100101,B11100101,B11100101,B11100101,B11100101, 
B01000011,B01000011,B01000011,B01000011,B01000011, 
B11100001,B11100001,B11100001,B11100001,B11100001,

//Horizontal Layers
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,

//Diagonal
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00010001,B00100010,B01000100,B10001000,B00000000,

};

byte shift_4[]=
{
//RITU2016
B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,
B00000001,B00000001,B00000001,B00000001,B00000001,
B00000001,B00000001,B00000001,B00000001,B00000001,
B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,
B00000000,B00000000,B00000000,B00000000,B00000000,

//Horizontal Layers
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,

//Diagonal
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
B0,B0,B0,B0,B0,B0,B0,B0,B1,
};

byte gnd[]=
{
//RITU2016
B00000001,B00000010,B00000100,B00001000,B00010000, 
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000,
B00000001,B00000010,B00000100,B00001000,B00010000

//Horizontal Layers
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,
B00000001,B00000010,B00000100,B00001000,B00010000,B00000000,

//Diagonal
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,B00011111,
};


void setup() 
{
pinMode(latch_1, OUTPUT);
pinMode(clock_1, OUTPUT);
pinMode(data_1, OUTPUT);
pinMode(latch_2, OUTPUT);
pinMode(clock_2, OUTPUT);
pinMode(data_2, OUTPUT);
}

int i=0;
int count=sizeof(gnd);
void loop() 
{
digitalWrite(latch_1, LOW);
digitalWrite(latch_2, LOW);
shiftOut(data_1, clock_1, MSBFIRST, shift_4[i]);
shiftOut(data_1, clock_1, MSBFIRST, shift_3[i]);
shiftOut(data_1, clock_1, MSBFIRST, shift_2[i]);
shiftOut(data_1, clock_1, MSBFIRST, shift_1[i]);
shiftOut(data_2, clock_2, MSBFIRST, gnd[i]);
digitalWrite(latch_1, HIGH);
digitalWrite(latch_2, HIGH);
delay(500);
i++;
if (i>=count)
i=0;
}
